<?php

/**
 * @file
 * Contains blockframe.module.
 */

/**
 * hook_menu().
 */
function blockframe_menu() {
  $items['blockframe'] = array(
    'page callback' => 'blockframe_output',
    'type' => MENU_CALLBACK,
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Menu callback for blockframe.
 */
function blockframe_output($module, $delta) {
  // Page was accessed via menu router, save the flag to be used later.
  _blockframe_is_blockframe_request(TRUE);

  // Render the block.
  return render(_blockframe_get_block($module, $delta));
}

/**
 * hook_page_alter().
 */
function blockframe_page_alter(&$page) {
  if (_blockframe_is_blockframe_request()) {
    // Keep only the block on the page.
    $page = array(
      '#theme' => 'page',
      '#type' => 'page',
      'content' => $page['content']
    );
  }
}

/**
 * hook_js_alter().
 */
function blockframe_js_alter(&$javascript) {
  // Only for block requests.
  if (_blockframe_is_blockframe_request()) {
    $blacklist = array(
      'impliedConsent'
    );

    // Un-setting JS we definitely won't need.
    foreach ($javascript as $key => $value) {
      foreach ($blacklist as $filter) {
        // Either by exact path or a contained value for inline scripts.
        if (is_string($value['data'])) {
          if ($javascript[$key] == $filter || is_int(strpos($value['data'], $filter))) {
            unset($javascript[$key]);
          }
        }
      }
    }
  }
}

/**
 * hook_theme().
 */
function blockframe_theme($existing, $type, $theme, $path) {
  $themes['page__type__iframe'] = array(
    'template' => 'page--type--iframe',
    'path' => $path . '/templates',
  );

  return $themes;
}

/**
 * hook_preprocess_page().
 */

function blockframe_preprocess_page(&$vars, $hook) {
  // Add a static template suggestion only for block requests.
  if (_blockframe_is_blockframe_request()) {
    $vars['theme_hook_suggestions'][] = "page__type__iframe";
  }
}

/**
 * Determines whether a request should return a blockframe.
 *
 * @param
 *   $value TRUE or NULL.
 *
 * @return boolean
 *    True if it is a blockframe request. Otherwise NULL.
 */
function _blockframe_is_blockframe_request($value = NULL) {
  static $is_blockframe_request;

  if (isset($value)) {
    $is_blockframe_request = $value;
  }

  return $is_blockframe_request;
}

/**
 * Helper function to (hopefully) grab the block in a clean way.
 *
 * @param array $args
 *   The destination url containing the information about the block
 *
 * @return mixed
 *   Rendereable array for the block requested.
 *   Null if the block cannot be found.
 */
function _blockframe_get_block($module, $delta) {
  static $result;

  $key = $module . $delta;

  if (!isset($result[$key])) {
    $result[$key] = array();

    $block = block_load($module, $delta);
    if (isset($block->delta)) {
      $result[$key] = _block_get_renderable_array(_block_render_blocks(array($block)));
    }
  }

  return $result[$key];
}

/**
 * Implements hook_wysiwyg_widget_embed_alter().
 */
function blockframe_wysiwyg_widget_embed_alter(&$placeholders) {
  $placeholders['iframe_block'] = array(
    'regex' => array(
      'pattern' => 'blockframe',
      'flags' => 'gi',
    ),
    'icon_markup' => '<img class="wysiwyg-widget-embed-img" title="Iframe Block" ' .
      'src="/' . drupal_get_path('module', 'blockframe') .
      '/images/iframe.jpeg" />',
  );
}
