<?php

/**
 * @file
 * Contains blockframe.module.
 */

/**
 * hook_page_alter().
 */
function blockframe_page_alter(&$page) {
  if (_blockframe_is_blockframe_request()) {
    $page['content'] = _blockframe_get_block();
  }
}

/**
 * hook_js_alter().
 */

function blockframe_js_alter(&$javascript) {
  // Only for block requests.
  if (_blockframe_is_blockframe_request()) {
    $blacklist = array(
      'impliedConsent'
    );

    // Un-setting JS we definitely won't need.
    foreach ($javascript as $key => $value) {
      foreach ($blacklist as $filter) {
        // Either by exact path or a contained value for inline scripts.
        if (is_string($value['data'])) {
          if ($javascript[$key] == $filter || is_int(strpos($value['data'], $filter))) {
            unset($javascript[$key]);
          }
        }
      }
    }
  }
}

/**
 * hook_theme().
 */

function blockframe_theme($existing, $type, $theme, $path) {
  $themes['page__type__iframe'] = array(
    'template' => 'page--type--iframe',
    'path' => $path . '/templates',
  );

  return $themes;
}

/**
 * hook_preprocess_page().
 */

function blockframe_preprocess_page(&$vars, $hook) {
  //Add a static template suggestion only for block requests.
  if (_blockframe_is_blockframe_request()) {
    $vars['theme_hook_suggestions'][] = "page__type__iframe";
  }
}

/**
 * Determines whether a request should return a blockframe.
 *
 * @return boolean
 *    True if it is a blockframe request. Otherwise NULL.
 */
function _blockframe_is_blockframe_request() {
  $destination = _blockframe_get_destination();
  if (substr($destination, 0, 11) == 'blockframe/') {
    return TRUE;
  }
}

/**
 * Gets the iframe destination.
 *
 * @return string
 *    The destination.
 */
function _blockframe_get_destination() {
  // Get the query string.
  $query_string = drupal_get_query_parameters();
  if (!isset($query_string['destination'])) {
    return '';
  }

  return check_plain($query_string['destination']);
}

/**
 * Helper function to (hopefully) grab the block in a clean way.
 *
 * @param array $args
 *   The destination url containing the information about the block
 *
 * @return mixed
 *   Rendereable array for the block requested.
 *   Null if the block cannot be found.
 */
function _blockframe_get_block() {
  static $result;

  $destination = _blockframe_get_destination();

  if (!isset($result[$destination])) {
    $result[$destination] = array();
    $parts = explode('/', $destination);

    if ($parts[0] == 'blockframe' && $parts[1] == 'block') {
      $block = block_load($parts[2], $parts[3]);
      if (isset($block->delta)) {
        $result[$destination] = _block_get_renderable_array(_block_render_blocks(array($block)));
      }
    }
  }

  return $result[$destination];
}
