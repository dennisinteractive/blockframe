<?php

/**
 * @file
 * Contains blockframe.module.
 */

/**
 * hook_page_alter().
 */

function blockframe_page_alter(&$page) {
  // Only for block requests.
  if (_blockframe_is_blockframe_request()) {
    // Grab out block
    $block = _blockframe_get_block_request();

    // Replace just the content as every other region is ditched in the custom TPL
    $page['content'] = $block;
  }
}

/**
 * hook_js_alter().
 */

function blockframe_js_alter(&$javascript) {
  // Only for block requests.
  if (_blockframe_is_blockframe_request()) {
    $blacklist = array(
      'impliedConsent'
    );

    // Un-setting JS we definitely won't need.
    foreach ($javascript as $key => $value) {
      foreach ($blacklist as $filter) {
        // Either by exact path or a contained value for inline scripts.
        if (is_string($value['data'])) {
          if ($javascript[$key] == $filter || is_int(strpos($value['data'], $filter))) {
            unset($javascript[$key]);
          }
        }
      }
    }
  }
}

/**
 * hook_theme().
 */

function blockframe_theme($existing, $type, $theme, $path) {
  $themes['page__type__iframe'] = array(
    'template' => 'page--type--iframe',
    'path' => $path . '/templates',
  );

  return $themes;
}

/**
 * hook_preprocess_page().
 */

function blockframe_preprocess_page(&$vars, $hook) {
  //Add a static template suggestion only for block requests.
  if (_blockframe_is_blockframe_request()) {
    $vars['theme_hook_suggestions'][] = "page__type__iframe";
  }
}

/**
 * Determines whether a request should return a blockframe.
 */
function _blockframe_is_blockframe_request() {
  // Get the query string.
  $query_string = drupal_get_query_parameters();

  // Check if there is a destination.
  if (!isset($query_string['destination'])) {
    return;
  }

  // Check if the destination should be resolved by this module.
  $destination = $query_string['destination'];
  if (substr($destination, 0, 11) == 'blockframe/' && _blockframe_get_block_request()) {
    return TRUE;
  }
}

/**
 * Helper function to (hopefully) grab the block in a clean way.
 */
function _blockframe_get_block_request() {
  $markup = &drupal_static(__FUNCTION__);
  // Run only if it hasn't been fetched before
  if (!isset($markup) && isset($_GET['destination'])) {
    $markup = FALSE;
//var_dump($_GET);

    // Grab the URL and try to load a block
    $query = $_GET['destination'];
    $params = explode('/', $query);

    if ($params[0] == 'block') {
      $block = block_load($params[1], $params[2]);

      // Only if it's a real block proceed
      if (isset($block->bid)) {
        // For some reason the readable block id is dropped. TODO: Figure out why I have to do this.
        $block->bid = $params[1] . "-" . $params[2];
        $block_render = _block_get_renderable_array(_block_render_blocks(array($block)));

        // Save out our markup
        $markup = $block_render;
      }
    }
  }

  return $markup;
}
